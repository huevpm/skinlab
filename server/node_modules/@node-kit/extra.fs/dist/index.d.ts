/// <reference types="node" />

import { PathLike } from 'fs';
import type { PathOrFileDescriptor } from 'fs';
import { promises } from 'fs';
import { readFileSync } from 'fs';
import { RmDirOptions } from 'fs';
import type { WriteFileOptions } from 'fs';
import { writeFileSync } from 'fs';

/**
 * copy file
 *
 * @param paths - path or file, support array
 * @param target - target path
 * @param options - CpOptions
 */
export declare function cp(paths: PathLike | PathLike[], target: PathLike, options?: CpOptions): Promise<void>;

export declare interface CpOptions extends RmDirOptions {
    /**
     * force delete, default: true
     */
    force?: boolean;
    /**
     * do not output logs, default: true
     */
    silent?: boolean;
}

/**
 * copy file sync
 *
 * @param paths - path or file, support array
 * @param target - target path
 * @param options - CpOptions
 */
export declare function cpSync(paths: PathLike | PathLike[], target: PathLike, options?: CpOptions): void;

/**
 * resolve realpath
 *
 * @param path - the path
 * @returns result - the realpath
 */
export declare function getRealPath(path: string): Promise<string>;

/**
 * resolve realpath sync function
 *
 * @param path - the path
 * @returns result - the realpath
 */
export declare function getRealPathSync(path: string): string;

/**
 * move file
 *
 * @param paths - path or file, support array
 * @param target - target path
 * @param options - MvOptions
 */
export declare function mv(paths: PathLike | PathLike[], target: PathLike, options?: MvOptions): Promise<void>;

export declare interface MvOptions extends CpOptions, RmOptions {
    /**
     * force delete, default: true
     */
    force?: boolean;
    /**
     * do not output logs, default: true
     */
    silent?: boolean;
}

/**
 * move file sync
 *
 * @param paths - path or file, support array
 * @param target - target path
 * @param options - MvOptions
 */
export declare function mvSync(paths: PathLike | PathLike[], target: PathLike, options?: MvOptions): void;

/**
 * read json file
 *
 * @example
 * ```ts
 * import { readJSON } from '@node-kit/extra.fs'
 * const data = await readJSON('/path/of/json', { encoding: 'utf8 }) // \{ "name": "saqqdy" \}
 * ```
 * @param args - Parameters\<typeof promises.readFile\>
 * @returns result - json | \{\}
 */
export declare function readJSON(...args: Parameters<typeof promises.readFile>): Promise<Record<string, unknown> | null>;

/**
 * read json file sync function
 *
 * @example
 * ```ts
 * import { readJSONSync } from '@node-kit/extra.fs'
 * const data = readJSONSync('/path/of/json', { encoding: 'utf8 }) // \{ "name": "saqqdy" \}
 * ```
 * @param args - Parameters\<typeof readFileSync\>
 * @returns result - json | \{\}
 */
export declare function readJSONSync(...args: Parameters<typeof readFileSync>): Record<string, unknown> | null;

/**
 * remove file
 *
 * @param paths - path or file, support array
 * @param options - RmOptions
 */
export declare function rm(paths: PathLike | PathLike[], options?: RmOptions): Promise<void>;

export declare interface RmOptions extends RmDirOptions {
    /**
     * force delete, default: true
     */
    force?: boolean;
    /**
     * do not output logs, default: true
     */
    silent?: boolean;
}

/**
 * remove file sync
 *
 * @param paths - path or file, support array
 * @param options - RmOptions
 */
export declare function rmSync(paths: PathLike | PathLike[], options?: RmOptions): void;

/**
 * write json file
 *
 * @example
 * ```ts
 * import { writeJSON } from '@node-kit/extra.fs'
 * writeJSON('/path/of/file', 'test data', { encoding: 'utf8 }).then(() => {})
 * ```
 * @param args - Parameters\<typeof promises.writeFile\>
 */
export declare function writeJSON(file: Parameters<typeof promises.writeFile>[0], data: Record<string, unknown> | Parameters<typeof promises.writeFile>[1], options?: WriteFileOptions): Promise<void>;

/**
 * write json file sync function
 *
 * @example
 * ```ts
 * import { writeJSONSync } from '@node-kit/extra.fs'
 * writeJSONSync('/path/of/file', 'test data', { encoding: 'utf8 })
 * ```
 * @param args - Parameters\<typeof writeFileSync\>
 */
export declare function writeJSONSync(file: PathOrFileDescriptor, data: Record<string, unknown> | Parameters<typeof writeFileSync>[1], options?: WriteFileOptions): void;

export { }
