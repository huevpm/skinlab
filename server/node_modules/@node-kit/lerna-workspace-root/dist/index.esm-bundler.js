import { join, dirname } from 'path';
import findUp from 'find-up';
import { getRealPathSync, getRealPath } from '@node-kit/extra.fs';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var WORKSPACE_DIR_ENV_VAR = "NPM_CONFIG_WORKSPACE_DIR";
var WORKSPACE_MANIFEST_FILENAME = "lerna.json";
function lernaWorkspaceRoot() {
  return _lernaWorkspaceRoot.apply(this, arguments);
}
function _lernaWorkspaceRoot() {
  _lernaWorkspaceRoot = _asyncToGenerator(function* () {
    var _process$env$WORKSPAC2;
    var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
    var workspaceManifestDirEnvVar = (_process$env$WORKSPAC2 = process.env[WORKSPACE_DIR_ENV_VAR]) !== null && _process$env$WORKSPAC2 !== void 0 ? _process$env$WORKSPAC2 : process.env[WORKSPACE_DIR_ENV_VAR.toLowerCase()];
    var workspaceManifestPath = workspaceManifestDirEnvVar ? join(workspaceManifestDirEnvVar, WORKSPACE_MANIFEST_FILENAME) : yield findUp(WORKSPACE_MANIFEST_FILENAME, {
      cwd: yield getRealPath(cwd)
    });
    return workspaceManifestPath && dirname(workspaceManifestPath) || null;
  });
  return _lernaWorkspaceRoot.apply(this, arguments);
}
function lernaWorkspaceRootSync() {
  var _process$env$WORKSPAC;
  var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
  var workspaceManifestDirEnvVar = (_process$env$WORKSPAC = process.env[WORKSPACE_DIR_ENV_VAR]) !== null && _process$env$WORKSPAC !== void 0 ? _process$env$WORKSPAC : process.env[WORKSPACE_DIR_ENV_VAR.toLowerCase()];
  var workspaceManifestPath = workspaceManifestDirEnvVar ? join(workspaceManifestDirEnvVar, WORKSPACE_MANIFEST_FILENAME) : findUp.sync(WORKSPACE_MANIFEST_FILENAME, {
    cwd: getRealPathSync(cwd)
  });
  return workspaceManifestPath && dirname(workspaceManifestPath) || null;
}

export { lernaWorkspaceRoot, lernaWorkspaceRootSync };
