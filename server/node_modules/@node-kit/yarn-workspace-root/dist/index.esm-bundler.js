import { normalize, join, relative, dirname } from 'path';
import { readJSONSync, getRealPathSync, readJSON, getRealPath } from '@node-kit/extra.fs';
import micromatch from 'micromatch';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function yarnWorkspaceRoot() {
  return _yarnWorkspaceRoot.apply(this, arguments);
}
function _yarnWorkspaceRoot() {
  _yarnWorkspaceRoot = _asyncToGenerator(function* () {
    var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
    var previous = null, current = normalize(cwd);
    do {
      var manifest = yield readJSON(join(current, "package.json"));
      var workspaces = extractWorkspaces(manifest);
      if (workspaces) {
        var relativePath = relative(current, yield getRealPath(cwd));
        if (relativePath === "" || micromatch([relativePath], workspaces).length > 0) {
          return current;
        } else {
          return null;
        }
      }
      previous = current;
      current = dirname(current);
    } while (current !== previous);
    return null;
  });
  return _yarnWorkspaceRoot.apply(this, arguments);
}
function yarnWorkspaceRootSync() {
  var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
  var previous = null, current = normalize(cwd);
  do {
    var manifest = readJSONSync(join(current, "package.json"));
    var workspaces = extractWorkspaces(manifest);
    if (workspaces) {
      var relativePath = relative(current, getRealPathSync(cwd));
      if (relativePath === "" || micromatch([relativePath], workspaces).length > 0) {
        return current;
      } else {
        return null;
      }
    }
    previous = current;
    current = dirname(current);
  } while (current !== previous);
  return null;
}
function extractWorkspaces(manifest) {
  var workspaces = (manifest || {}).workspaces;
  return workspaces && workspaces.packages || (Array.isArray(workspaces) ? workspaces : null);
}

export { yarnWorkspaceRoot, yarnWorkspaceRootSync };
