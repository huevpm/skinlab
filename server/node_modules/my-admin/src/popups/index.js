/*
 * @Author: sean
 * @Date:   2019-12-26 11:04:13
 * @Last Modified by:   wiki
 * @Last Modified time: 2020-03-26 16:16:14
 */
import Vue from 'vue';

import * as utils from './utils.js';

import popups from './popups';

import footer from './extend/footer.vue'

import Modal from './extend/Modal.vue'


function popup(option) {

}

/**
 * <p  v-popup.role="description" data-value="description">新建</p>
 *
 * v-popup.<绑定的模态框>="<需要传入的值>" 
 * data-value="<回调改变的值>"
 * data-title="设置标题"
 *
 * 添加 affirm 方法
 * @param  {[type]} option [description]
 * @return {[type]}        [description]
 */
let directives = {
  /**
   * 数据池
   * @type {Array}
   */
  store: {},
  /**
   * 弹出层
   * @type {Object}
   */
  popup: {
    bind: function(el, binding, vnode) {

    },
    inserted: function(el, binding, vnode) {
      let keys = el.dataset.id || binding.expression || "_";
      directives.store[keys] = binding.value ? binding.value : [];
      utils.addEvent(el, 'click', () => {
        //获取双向绑定数据
        let value = directives.store[keys];
        //获取对应模型
        let popup = utils.getShift(binding.modifiers);
        //获取窗口标题
        let title = el.dataset.title ? el.dataset.title : "操作窗口";
        //绑定数据
        let vmodel = el.dataset.value ? el.dataset.value : "";
        //VM实例
        let vm = vnode.context;

        //判断模态框是否存在
        if (popups[popup]) {
          let visible = true;

          let content = Vue.extend(popups[popup].default);

          let instance = utils.getInstance(Vue.extend(Modal), {
            visible: visible,
            value: value,
            title: title,
            content: content
          });

          let model = document.body.appendChild(instance.$el);
          //监听并移除节点
          instance.$watch('visible', res => {
            if (vmodel) {
              vm[vmodel] = instance.value
            }
            instance.visible = false;
            document.body.removeChild(model);
            if (vm.reload) {
              vm.reload();
            }
          });
        } else {
          console.log(popup + "模态框不存在")
        }
      })
      //console.log("查看绑定", [el, binding, vnode, directives.store]);
    },
    update: function(el, binding, vnode) {
      let keys = binding.expression ? binding.expression : "_";
      if (!utils.empty(binding.value)) {
        directives.store[keys] = binding.value
      }
    }
  },

}


Object.keys(directives).forEach(function(key, index) {
  let item = directives[key];
  Vue.directive(key, item);
})

Vue.prototype.$popup = popup;