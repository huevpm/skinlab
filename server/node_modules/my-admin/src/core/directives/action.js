import Vue from 'vue'
import store from '#/store'

/**
 * Action 权限指令
 * 指令用法：
 *  - 在需要控制 action 级别权限的组件上使用 v-action:[method] , 如下：
 *    <i-button v-action:add >添加用户</a-button>
 *    <a-button v-action:delete>删除用户</a-button>
 *    <a v-action:edit @click="edit(record)">修改</a>
 *
 *  - 当前用户没有权限时，组件上使用了该指令则会被隐藏
 *  - 当后台权限跟 pro 提供的模式不同时，只需要针对这里的权限过滤进行修改即可
 *
 *  @see https://github.com/sendya/ant-design-pro-vue/pull/53
 */
const action = Vue.directive('action', {
  inserted: function(el, binding, vnode) {

    let actionModel = "*"
    let actionName = "";

    if (binding.arg) {
      actionName = binding.arg
    }
    if (binding.modifiers) {
      try {
        let actionInfo = Object.keys(binding.modifiers)[0].split(":");
        if (actionInfo.length == 2) {
          actionModel = actionInfo[0];
          actionName = actionInfo[1];
        }
      } catch (err) {}
    }


    const roles = store.getters.roles
    const elVal = vnode.context.$route.meta.permission
    const permissionId = elVal instanceof String && [elVal] || elVal

    //循环处理验证消息
    roles.permissions.forEach(p => {

      if (!permissionId.includes(p.permissionId)) {
        return
      }
      let verify_model = false;
      let verify_name = false;
      let verify_action = false;
      //循环匹配全新
      p.actionList.forEach((item, index) => {
        let itemInfo = item.split(":");

        if (itemInfo[0] == "*") {
          verify_model = true
        } else if (itemInfo[0] == actionModel) {
          verify_model = true
        }

        if (itemInfo[1] == "*") {
          verify_name = true
        } else if (itemInfo[1] == actionName) {
          verify_name = true
        }

        if (verify_model == verify_name) {
          verify_action = true
        }

      });

      //设置如果验证不通过则移除
      if (verify_action == false) {
        el.parentNode && el.parentNode.removeChild(el) || (el.style.display = 'none')
      }
    })
  }
})

export default action