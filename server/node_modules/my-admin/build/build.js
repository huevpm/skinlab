/*
 * @Author: sean
 * @Date:   2020-03-11 16:00:12
 * @Last Modified by:   sean
 * @Last Modified time: 2020-05-14 21:37:29
 */
const path = require("path");

//常量
const { DS, DEBUG, FRAME_DIR, ROOT_DIR, ROOT_SRC, isProd } = require('./basics');

const webpack = require('webpack')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const VueLoaderPlugin = require('vue-loader/lib/plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const createThemeColorReplacerPlugin = require('./plugin.config')
const openBrowserWebpackPlugin = require("open-browser-webpack-plugin"); // 打开浏览器
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const ProgressBarPlugin = require('progress-bar-webpack-plugin');

module.exports = {
    mode: "production",
    devtool: 'cheap-module-eval-source-map',
    entry: ROOT_SRC + '/main.js',
    output: {
        filename: 'js/[name].[hash].js',
        publicPath: "/",
        path: path.resolve(ROOT_DIR, 'dist')
    },
    resolve: {
        extensions: ['.js', '.vue', '.jsx', '.json'],
        alias: {
            "#": ROOT_SRC,
            "@": path.resolve(ROOT_DIR, './')
        }
    },
    stats: "verbose",
    externals: {
        vue: 'Vue',
        'vue-router': 'VueRouter',
        vuex: 'Vuex',
        axios: 'axios'
    },
    optimization: {
        splitChunks: {
            /**
                1. 三个值 
                    async 仅提取按需载入的module
                    initial 仅提取同步载入的module
                    all 按需、同步都有提取
            */
            chunks: "all",
            // 只有导入的模块 大于 该值 才会 做代码分割 （单位字节）
            minSize: 10000,
            // 提取出的新chunk在两次压缩之前要小于多少kb，默认为0，即不做限制
            maxSize: 0,
            // 被提取的chunk最少需要被多少chunks共同引入
            minChunks: 1,
            // 按需加载的代码块（vendor-chunk）并行请求的数量小于或等于5个
            maxAsyncRequests: 5,
            // 初始加载的代码块，并行请求的数量小于或者等于3个
            maxInitialRequests: 3,
            // 默认命名 连接符
            automaticNameDelimiter: '~',
            /**
                name 为true时，分割文件名为 [缓存组名][连接符][入口文件名].js
                name 为false时，分割文件名为 [模块id][连接符][入口文件名].js
                如果 缓存组存在 name 属性时 以缓存组的name属性为准
            */
            name: true,
            // 缓存组 当符合 代码分割的 条件时 就会进入 缓存组 把各个模块进行分组，最后一块打包
            cacheGroups: {
                // 如果 引入文件 在node_modules 会被打包 这个缓存组(vendors)
                vendors: {
                    // 只分割 node_modules文件夹下的模块
                    test: /[\\/]node_modules[\\/]/,
                    // 优先级 因为如果 同时满足 vendors、和default 哪个优先级高 就会打包到哪个缓存组
                    priority: -10
                },
                default: {
                    // 表示这个库 至少被多少个chunks引入，
                    minChunks: 2,
                    priority: -20,
                    // 如果 这个模块已经 被分到 vendors组，这里无需在分割 直接引用 分割后的
                    reuseExistingChunk: true
                }
            }
        }
    },
    performance: {
        hints: 'warning',
        //入口起点的最大体积 整数类型（以字节为单位）
        maxEntrypointSize: 50000000,
        //生成文件的最大体积 整数类型（以字节为单位 300k）
        maxAssetSize: 30000000,
        //只给出 js 文件的性能提示
        assetFilter: function(assetFilename) {
            return assetFilename.endsWith('.js');
        }
    },
    module: {
        rules: [{
                test: /\.vue$/,
                use: ['vue-loader']
            },
            {
                test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
                loader: 'file-loader',
                include: [path.resolve(__dirname, "../")],
                options: {
                    esModule: false, // 这里设置为false
                    name: 'assets/[name].[ext]?[hash]',
                    limit: 102400
                }
            },
            {
                test: /\.css$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    'postcss-loader'
                ]
            },
            {
                test: /\.less$/,
                use: [{
                    loader: "style-loader"
                }, {
                    loader: "css-loader"
                }, {
                    loader: "less-loader",
                    options: {
                        javascriptEnabled: true
                    }
                }]
            },
            {
                test: /(\.js|jsx?)$/,
                include: [path.resolve(__dirname, "../")],
                use: ['babel-loader']
            }
        ]
    },
    plugins: [
        new ProgressBarPlugin(),
        new MiniCssExtractPlugin({
            filename: "css/[name].css",
            chunkFilename: "css/[id].css"
        }),
        createThemeColorReplacerPlugin(),
        new webpack.HotModuleReplacementPlugin(),
        new HtmlWebpackPlugin({
            cdnConfig: [
                '//cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js',
                '//cdn.jsdelivr.net/npm/vue-router@3.1.3/dist/vue-router.min.js',
                '//cdn.jsdelivr.net/npm/vuex@3.1.1/dist/vuex.min.js',
                '//cdn.jsdelivr.net/npm/axios@0.19.0/dist/axios.min.js'
            ],
            minify: {
                removeComments: true
            },
            template: path.resolve(ROOT_SRC, 'template.html'),
            // filename: '../index.html',
        }),
        new VueLoaderPlugin(),
        new CleanWebpackPlugin()
    ]
}