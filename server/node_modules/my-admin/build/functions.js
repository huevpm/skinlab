/*
 * @Author: sean
 * @Date:   2020-01-03 13:33:35
 * @Last Modified by:   sean
 * @Last Modified time: 2020-03-15 13:46:35
 */
const fs = require("fs");

const path = require("path");

//路径模块
const { DS, DEBUG, FRAME_DIR, ROOT_DIR, ROOT_SRC, isProd } = require('./basics.js');

function portIsOccupied(port) {
    return new Promise((resolve, reject) => {
        // 创建服务并监听该端口
        var server = net.createServer().listen(port)

        server.on('listening', function() { // 执行这块代码说明端口未被占用
            resolve(port)
        })

        server.on('error', function(err) {
            if (err.code === 'EADDRINUSE') { // 端口已经被使用
                resolve(port + 1)
            }
        })
    })
}

function file_get_contents(file) {
    return fs.readFileSync(file, 'utf8');
}



/**
 * 判断目录是否存在
 * @param  {[type]}  dir [description]
 * @return {Boolean}     [description]
 */
function is_dir(dir) {
    try {
        return fs.statSync(path.join(dir)).isDirectory();
    } catch (e) {
        return false
    }
}


/**
 * 判断文件是否存在
 * @param  {[type]}  dirname [description]
 * @return {Boolean}         [description]
 */
function is_file(dirname) {
    try {
        return fs.statSync(path.join(dirname)).isFile();
    } catch (e) {
        return false;
    }
}

/**
 * 同步递归创建文件
 * @param  {[type]} dirname [description]
 * @return {[type]}         [description]
 */
function mkdir(dirname) {
    if (fs.existsSync(dirname)) {
        return true;
    } else {
        if (mkdir(path.dirname(dirname))) {
            fs.mkdirSync(dirname);
            return true;
        }
    }
}
/**
 * 创建文件目录
 * @param  {[type]}  $path    目录名称，如果是文件并且不存在的情况下会自动创建
 * @param  {[type]}  data     写入数据
 * @param  {Boolean} is_full  完整路径，默认False
 * @param  {Boolean} is_cover 强制覆盖，默认False
 * @return {Boolean}          True|False
 */
function to_mkdir($path = null, data = null, is_full = false, is_cover = false) {
    //判断是否完整路径
    if (!is_full) {
        $path = ROOT_DIR + '/' + ltrim(ltrim($path, './'), '/');
    }

    let file = $path;

    //获取文件后缀
    let file_suffix = path.extname(file);

    if (file_suffix) {
        $path = path.resolve(file, '../')
    }

    //执行目录创建
    if (!is_dir($path)) {
        mkdir($path);
    }

    if (file_suffix) {
        if (!is_file(file)) {
            fs.writeFile(file, data, function(error) {
                console.log(error);
            })
            return true;
        } else {
            //强制覆盖
            if (is_cover) {
                fs.writeFile(file, data, function(error) {
                    console.log(error);
                })
                return true;
            } else {
                return false;
            }
        }
    }
}

module.exports = {
    is_file,
    mkdir,
    to_mkdir,
    portIsOccupied,
    file_get_contents
};