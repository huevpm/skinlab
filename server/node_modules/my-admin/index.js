#! node

/*
 * @Author: sean
 * @Date:   2020-03-11 16:00:07
 * @Last Modified by:   Qinuoyun
 * @Last Modified time: 2020-05-14 15:10:21
 */
//路径模块
const { DS, DEBUG, FRAME_DIR, ROOT_DIR, ROOT_SRC, isProd } = require('./build/basics.js');

const { to_mkdir, is_file, file_get_contents } = require('./build/functions.js');

const webpack = require("webpack");

const path = require("path");

const express = require("express");

const webpackDevMiddleWare = require("webpack-dev-middleware");

const webpackHotMiddleware = require("webpack-Hot-middleware")

const history = require('connect-history-api-fallback');

const config = require("./build/config.js");

const package_c = require(ROOT_DIR + '/package.json')

const io = require("socket.io-client");

const app = express();

const compiler = webpack(config);

// app.use(history());

app.use("/dist", express.static(path.resolve(ROOT_DIR, 'dist')));
app.use("/css", express.static(path.resolve(ROOT_DIR, 'css')));
app.use("/js", express.static(path.resolve(ROOT_DIR, 'js')));
app.use("/assets", express.static(path.resolve(ROOT_DIR, 'assets')));
app.use("/src", express.static(path.resolve(ROOT_DIR, 'src')));

// app.use(express.static(ROOT_DIR));

//webpack-dev-middleware输出的文件存在于内存中
app.use(webpackDevMiddleWare(compiler, {
    publicPath: "/",
    quiet: true, //向控制台显示任何内容
    stats: "errors-only"
    // stats: {
    //     colors: true,
    //     chunks: false
    // }
}));

to_mkdir(ROOT_DIR + "/middleware/index.js", "export default {}", true, false);

let getters = ROOT_DIR + "/store/getters.js";

to_mkdir(ROOT_DIR + "/store/getters.js", "export default {}", true, false);

let babel_config = file_get_contents(path.resolve(FRAME_DIR, '../babel.config.js'))

to_mkdir(ROOT_DIR + "/babel.config.js", babel_config, true, false);

let postcss_config = file_get_contents(path.resolve(FRAME_DIR, '../postcss.config.js'))

to_mkdir(ROOT_DIR + "/postcss.config.js", postcss_config, true, false);

let HelloWorld = file_get_contents(path.resolve(ROOT_SRC, './components/HelloWorld.vue'))

to_mkdir(ROOT_DIR + "/components/HelloWorld.vue", HelloWorld, true, false);

let Works = file_get_contents(path.resolve(ROOT_SRC, './views/dashboard/works.vue'))

to_mkdir(ROOT_DIR + "/views/dashboard/works.vue", Works, true, false);

let Popups = file_get_contents(path.resolve(ROOT_SRC, './popups/extend/Demo.vue'))

to_mkdir(ROOT_DIR + "/popups/demo/index.vue", Popups, true, false);

let package = JSON.parse(file_get_contents(path.resolve(ROOT_DIR, './package.json')));

//修改主 "build": "rollup -c ./build/config.js"
if (package && !package.scripts.build) {
    package.scripts.build = "node ./node_modules/my-admin/build.js"
    to_mkdir(ROOT_DIR + "/package.json", JSON.stringify(package), true, true);
}

//消息监听
const MANONG_LOGIN = "__MANONG_LOGIN__"
const MANONG_ACTION = "__MANONG_ACTION__"




//将编译器挂载给 webpack dev middleware
app.use(webpackHotMiddleware(compiler))

//页面加载
app.get("*", (req, res, next) => {

    //执行页面渲染
    const filename = path.resolve(ROOT_DIR, './dist/index.html');
    compiler.outputFileSystem.readFile(filename, (err, result) => {
        if (err) {
            return (next(err))
        }
        res.set('content-type', 'text/html')
        res.send(result)
        res.end()
    })
})

app.listen(8888, "localhost", () => {
    console.log('监听:http://localhost:8888')
})