import { __awaiter, __generator } from 'tslib';
import { promises, readFileSync } from 'fs';
import { load, dump } from 'js-yaml';

/**
 * Strip UTF-8 byte order mark (BOM) from a string
 *
 * @param data - string
 * @returns - result
 */
function stripBom(data) {
  if (typeof data !== 'string') throw new TypeError("Expected a string, got ".concat(typeof data));
  // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string
  // conversion translates it to FEFF (UTF-16 BOM).
  if (data.charCodeAt(0) === 0xfeff) return data.slice(1);
  return data;
}
/**
 * parse yaml data
 *
 * @param data - file path
 * @param options - load options: LoadOptions
 * @returns - result
 */
function parseYml(data, options) {
  return load(stripBom(data), options);
}
/**
 * stringify yaml data
 *
 * @param data - file path
 * @param options - dump options: DumpOptions
 * @returns - result
 */
function stringifyYml(data, options) {
  return dump(data, options);
}
/**
 * load .yml or .yaml
 *
 * @example
 * ```ts
 * import { loadYml } from 'load-yml'
 * const data = await loadYml('/path/of/yaml') // \{ "name": "saqqdy" \}
 * ```
 * @param path - file path
 * @returns - result
 */
function loadYml(path) {
  return __awaiter(this, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          _a = parseYml;
          return [4 /*yield*/, promises.readFile(path, 'utf8')];
        case 1:
          return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
      }
    });
  });
}
/**
 * load .yml or .yaml sync
 *
 * @example
 * ```ts
 * import { loadYmlSync } from 'load-yml'
 * const data = loadYmlSync('/path/of/yaml') // \{ "name": "saqqdy" \}
 * ```
 * @param path - file path
 * @returns - result
 */
function loadYmlSync(path) {
  return parseYml(readFileSync(path, 'utf8'));
}
var version = '1.4.0';

export { loadYml, loadYmlSync, parseYml, stringifyYml, version };
