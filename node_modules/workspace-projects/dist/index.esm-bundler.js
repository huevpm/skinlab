import { lernaWorkspaceInfoSync, lernaWorkspaceInfo } from '@node-kit/lerna-workspace-info';
import { pnpmWorkspaceInfoSync, pnpmWorkspaceInfo } from '@node-kit/pnpm-workspace-info';
import { yarnWorkspaceInfoSync, yarnWorkspaceInfo } from '@node-kit/yarn-workspace-info';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function workspaceProjects() {
  return _workspaceProjects.apply(this, arguments);
}
function _workspaceProjects() {
  _workspaceProjects = _asyncToGenerator(function* () {
    var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
    var info = (yield pnpmWorkspaceInfo(cwd)) || (yield yarnWorkspaceInfo(cwd)) || (yield lernaWorkspaceInfo(cwd)) || null;
    if (info) {
      return Object.keys(info).map(function(project) {
        return info[project].path;
      });
    }
    return null;
  });
  return _workspaceProjects.apply(this, arguments);
}
function workspaceProjectsSync() {
  var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
  var info = pnpmWorkspaceInfoSync(cwd) || yarnWorkspaceInfoSync(cwd) || lernaWorkspaceInfoSync(cwd) || null;
  if (info) {
    return Object.keys(info).map(function(project) {
      return info[project].path;
    });
  }
  return null;
}

export { workspaceProjects, workspaceProjectsSync };
