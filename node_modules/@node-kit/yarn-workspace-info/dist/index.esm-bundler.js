import { join } from 'path';
import fg from 'fast-glob';
import { readJSONSync, readJSON } from '@node-kit/extra.fs';
import { dirname } from '@node-kit/extra.path';
import { yarnWorkspaceRootSync, yarnWorkspaceRoot } from '@node-kit/yarn-workspace-root';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var DEFAULT_IGNORE_PATHS = ["**/node_modules/**", "**/bower_components/**", "**/.*/**", "**/__test__/**", "**/__tests__/**", "**/test/**", "**/tests/**"];
var WORKSPACE_MANIFEST_FILENAME = "package.json";
function yarnWorkspaceInfo() {
  return _yarnWorkspaceInfo.apply(this, arguments);
}
function _yarnWorkspaceInfo() {
  _yarnWorkspaceInfo = _asyncToGenerator(function* () {
    var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
    var root = yield yarnWorkspaceRoot(cwd);
    if (!root) {
      console.error("not a yarn workspace project");
      return null;
    }
    var manifest = yield readJSON(join(root, WORKSPACE_MANIFEST_FILENAME));
    var projects = yield fg([].concat(manifest.workspaces), {
      cwd: root,
      ignore: DEFAULT_IGNORE_PATHS,
      onlyDirectories: true
    });
    var workspaceInfo = {};
    var _iterator2 = _createForOfIteratorHelper(projects), _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
        var projectPath = _step2.value;
        workspaceInfo[dirname(projectPath)] = {
          path: projectPath
        };
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return workspaceInfo;
  });
  return _yarnWorkspaceInfo.apply(this, arguments);
}
function yarnWorkspaceInfoSync() {
  var cwd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : process.cwd();
  var root = yarnWorkspaceRootSync(cwd);
  if (!root) {
    console.error("not a yarn workspace project");
    return null;
  }
  var manifest = readJSONSync(join(root, WORKSPACE_MANIFEST_FILENAME));
  var projects = fg.sync([].concat(manifest.workspaces), {
    cwd: root,
    ignore: DEFAULT_IGNORE_PATHS,
    onlyDirectories: true
  });
  var workspaceInfo = {};
  var _iterator = _createForOfIteratorHelper(projects), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var projectPath = _step.value;
      workspaceInfo[dirname(projectPath)] = {
        path: projectPath
      };
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return workspaceInfo;
}

export { yarnWorkspaceInfo, yarnWorkspaceInfoSync };
